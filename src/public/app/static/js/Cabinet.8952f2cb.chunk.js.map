{"version":3,"file":"static/js/Cabinet.8952f2cb.chunk.js","mappings":"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","sources":["webpack://content_insight_frontend/./src/views/Cabinet/Billing/Billing.module.scss?6d8b","views/Cabinet/Billing/Billing.tsx","webpack://content_insight_frontend/./src/components/ProjectTile/ProjectTile.module.scss?4035","components/ProjectTile/ProjectTile.tsx","webpack://content_insight_frontend/./src/views/Cabinet/Projects/Projects.module.scss?71d6","views/Cabinet/Projects/Projects.tsx","webpack://content_insight_frontend/./src/views/Cabinet/Settings/Settings.module.scss?26bd","views/Cabinet/Settings/Settings.tsx","webpack://content_insight_frontend/./src/views/Cabinet/Cabinet.module.scss?7108","views/Cabinet/Cabinet.tsx","views/Cabinet/Stats/Stats.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"checkoutResultMessage\":\"Billing_checkoutResultMessage__HI5wo\"};","import React, { useEffect, useState } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Redirect, useLocation, useRouteMatch } from \"react-router\";\r\nimport { loadStripe } from \"@stripe/stripe-js\";\r\nimport {\r\n  EmbeddedCheckoutProvider,\r\n  EmbeddedCheckout,\r\n} from \"@stripe/react-stripe-js\";\r\nimport { Route, Switch } from \"react-router\";\r\n\r\nimport store, { BASE_URL } from \"@/MST/store\";\r\n\r\nimport styles from \"./Billing.module.scss\";\r\nimport axios from \"axios\";\r\nimport { Button } from \"@/components\";\r\n\r\nconst stripePromise = loadStripe(\r\n  \"pk_test_51Nxd5pEafHQOYw4BGVCREVAXfGdqJ1waIwTd9TT9cWrP1dI8b9rkgaTV25WSRbVGzQFx9YcYDubV8WGF1Y0zNKYf00E2dA3E0t\"\r\n);\r\n\r\nconst BillingStatus: React.FC = () => {\r\n  const { userStripeCustomerId } = store.user;\r\n\r\n  const portalRedirect = async () => {\r\n    const portal_session = await axios.post(\r\n      BASE_URL + \"/api/v1/user/customerPortal\",\r\n      {\r\n        userStripeCustomerId,\r\n      }\r\n    );\r\n    window.location.href = portal_session.data.portal_session_url;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      User is registered in Stripe.{\" \"}\r\n      <Button onClick={portalRedirect}>To the customer portal</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\n/** This route renders for the client that does not yet have payment method registeres with Stripe.\r\n * So he registeres here his credit card via Stripe Elements.\r\n */\r\nconst CheckoutForm: React.FC = () => {\r\n  const { createSubscription, getProjectById } = store.user;\r\n  const { currentProjectId } = store.interface;\r\n  const [clientSecret, setClientSecret] = useState(\"\");\r\n  const currentProject = getProjectById(currentProjectId);\r\n\r\n  useEffect(() => {\r\n    // Create a Checkout Session as soon as the page loads.\r\n    createSubscription({\r\n      projectId: currentProjectId,\r\n      projectName: currentProject?.projectName || \"\",\r\n    }).then((secret) => setClientSecret(secret));\r\n  }, []);\r\n\r\n  const options = { clientSecret };\r\n\r\n  return (\r\n    <div id=\"checkout\">\r\n      {clientSecret && (\r\n        <EmbeddedCheckoutProvider stripe={stripePromise} options={options}>\r\n          <EmbeddedCheckout />\r\n        </EmbeddedCheckoutProvider>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n/** This route renders after the payment session completed, the Stripe did the redirect from the payment page\r\n * of the app and the browser tab was reloaded - so all the state was lost. Retrieving the selected project id\r\n * from the url query string.\r\n */\r\nconst CheckoutResult: React.FC = () => {\r\n  const [sessionResult, setSessionResult] = useState<any>();\r\n  const {\r\n    getPaymentSessionStatus,\r\n    getProjectById,\r\n    updateSubscriptionDataLocal,\r\n  } = store.user;\r\n  const { currentProjectId, setCurrentProjectId } = store.interface;\r\n  const { search } = useLocation();\r\n\r\n  useEffect(() => {\r\n    if (search) {\r\n      const urlParams = new URLSearchParams(search);\r\n      const session_id = urlParams.get(\"session_id\");\r\n      const projectId = urlParams.get(\"projectId\") as string;\r\n      if (!session_id || !projectId) return;\r\n      getPaymentSessionStatus({ session_id, projectId }).then(\r\n        (sessionResult) => {\r\n          setSessionResult(sessionResult);\r\n          setCurrentProjectId(projectId || \"\");\r\n          updateSubscriptionDataLocal({\r\n            projectId,\r\n            isActive: sessionResult.status === \"complete\" ? true : false,\r\n            stripeCustomerId: sessionResult.stripeCustomerId,\r\n            stripeProjectSubscriptionId:\r\n            sessionResult.stripeProjectSubscriptionId,\r\n            lastPaid: sessionResult.lastPaid,\r\n          });\r\n        }\r\n      );\r\n    }\r\n  }, [search]);\r\n\r\n  return sessionResult ? (\r\n    <div className={styles.checkoutResultMessage}>\r\n      Checkout result for project :\r\n      <p>Project name : {getProjectById(currentProjectId)?.projectName}</p>\r\n      <p>Project id : {currentProjectId}</p>\r\n      <p>\r\n        Result :\r\n        {sessionResult.status === \"complete\"\r\n          ? \"Payment successful\"\r\n          : \"Payment failed\"}\r\n      </p>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nconst Billing: React.FC = () => {\r\n  const { path } = useRouteMatch();\r\n  const { getProjectById } = store.user;\r\n  const { currentProjectId } = store.interface;\r\n\r\n  const currentProject = getProjectById(currentProjectId);\r\n\r\n  return currentProjectId ? (\r\n    <Switch>\r\n      <Route\r\n        exact\r\n        path={path}\r\n        component={\r\n          currentProject?.subscription?.id ? BillingStatus : CheckoutForm\r\n        }\r\n      />\r\n      <Route path={`${path}/checkoutResult`} component={CheckoutResult} />\r\n    </Switch>\r\n  ) : (\r\n    <Redirect to={\"/projects\"} />\r\n  );\r\n};\r\n\r\nexport default observer(Billing);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"projectTile\":\"ProjectTile_projectTile__quj6f\",\"projectDetails\":\"ProjectTile_projectDetails__grJt9\",\"wrapper\":\"ProjectTile_wrapper__v8hyE\",\"projectName\":\"ProjectTile_projectName__zn2aT\",\"projectDetailField\":\"ProjectTile_projectDetailField__Y9KxJ\",\"projectControls\":\"ProjectTile_projectControls__P+4YV\"};","import { observer } from \"mobx-react-lite\";\r\nimport { useHistory } from \"react-router\";\r\nimport Button from \"../elements/Button\";\r\nimport store from \"@/MST/store\";\r\n\r\nimport styles from \"./ProjectTile.module.scss\";\r\n\r\nimport { UserProjectType } from \"@/MST/user\";\r\nimport ProjectStatusLabel from \"../ProjectStatusLabel\";\r\n\r\ntype Props = UserProjectType & { onDelete: (projectId: string) => void };\r\n\r\nconst ProjectTile: React.FC<Props> = ({\r\n  _id,\r\n  projectName,\r\n  projectCreationDate,\r\n  projectURL,\r\n  subscription,\r\n  onDelete,\r\n}) => {\r\n  const history = useHistory();\r\n  const date = new Date(projectCreationDate || \"\").toLocaleDateString(\r\n    undefined,\r\n    {\r\n      weekday: \"long\",\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      day: \"numeric\",\r\n    }\r\n  );\r\n  const { setCurrentProjectId } = store.interface;\r\n\r\n  const onProjectClick = () => {\r\n    setCurrentProjectId(_id || \"\");\r\n    history.replace(\"/cabinet/settings\");\r\n  };\r\n\r\n  const onDeleteClick = (e: React.MouseEvent) => {\r\n    onDelete(_id || \"\");\r\n  };\r\n\r\n  return (\r\n    <div className={styles.projectTile}>\r\n      <div className={styles.projectDetails} onClick={onProjectClick}>\r\n        <div className={styles.wrapper}>\r\n          <div className={styles.projectName}>\r\n            {projectName}\r\n            <ProjectStatusLabel isActive={!!subscription?.isActive} />\r\n          </div>\r\n          <div className={styles.projectDetailField}>URL: {projectURL}</div>\r\n          <div className={styles.projectDetailField}>Created: {date}</div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={styles.projectControls}>\r\n        <Button\r\n          icon=\"icon_delete\"\r\n          text={\"Delete project\"}\r\n          onClick={onDeleteClick}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(ProjectTile);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"projectsContainer\":\"Projects_projectsContainer__-CySH\",\"addProjectButton\":\"Projects_addProjectButton__lsD59\",\"projectTilesWrapper\":\"Projects_projectTilesWrapper__ha7Uj\"};","import { observer } from \"mobx-react-lite\";\r\nimport { Button, Spinner } from \"@/components\";\r\nimport { ProjectTile } from \"@/components/ProjectTile\";\r\nimport store from \"@/MST/store\";\r\n\r\nimport styles from \"./Projects.module.scss\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst Projects: React.FC = () => {\r\n  const { userProjects } = store.user;\r\n  const { setModalType, setCurrentProjectId, setDeleteProjectId, isLoading } = store.interface;\r\n\r\n  useEffect(() => setCurrentProjectId(\"\"), []);\r\n\r\n  const onCreateProjectClick = () => {\r\n    setModalType(\"projectCreate\");\r\n  };\r\n\r\n  const onDeleteProjectClick = (projectId: string) => {\r\n    setDeleteProjectId(projectId);\r\n    setModalType(\"projectDelete\");\r\n  };\r\n\r\n  return (\r\n    <div className={styles.projectsContainer}>\r\n      <Button\r\n        icon=\"icon_plus\"\r\n        text={\"Add project\"}\r\n        className={styles.addProjectButton}\r\n        onClick={onCreateProjectClick}\r\n      />\r\n      <div className={styles.projectTilesWrapper}>\r\n        {userProjects.length\r\n          ? userProjects.map((project) => (\r\n              <ProjectTile\r\n                key={project._id}\r\n                {...project}\r\n                onDelete={onDeleteProjectClick}\r\n              />\r\n            ))\r\n          : \"You dont have any projects yet.\"}\r\n      </div>\r\n\r\n      {isLoading ? <Spinner /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(Projects);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"projectPageWrapper\":\"Settings_projectPageWrapper__x8BfJ\",\"projectPage\":\"Settings_projectPage__1LYim\",\"projectHeader\":\"Settings_projectHeader__MfVop\",\"projectPageSection\":\"Settings_projectPageSection__HZoTz\",\"sectionHeader\":\"Settings_sectionHeader__7Fv+K\",\"sectionContent\":\"Settings_sectionContent__mfMiW\",\"widgetSettings\":\"Settings_widgetSettings__3ZVDl\",\"widgetControls\":\"Settings_widgetControls__SxOnQ\",\"color\":\"Settings_color__oSXPk\",\"sourceURL\":\"Settings_sourceURL__JSKo0\",\"range\":\"Settings_range__nDO0q\",\"demoWidgetWrapper\":\"Settings_demoWidgetWrapper__dASOJ\",\"knowledgeBase\":\"Settings_knowledgeBase__rYB0Z\",\"labelWrapper\":\"Settings_labelWrapper__AToKV\",\"clearList\":\"Settings_clearList__ujRdJ\",\"knowledgeBaseList\":\"Settings_knowledgeBaseList__pqKmI\",\"knowledgeBaseUploadForm\":\"Settings_knowledgeBaseUploadForm__roudD\",\"filesList\":\"Settings_filesList__LJdJd\",\"scriptCode\":\"Settings_scriptCode__72b-w\",\"buttonsWrapper\":\"Settings_buttonsWrapper__QHHgf\",\"dragndropMessage\":\"Settings_dragndropMessage__I6pO6\"};","import React, { useEffect, useState, useRef } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Spinner, DemoWidget } from \"@/components\";\r\nimport { validateProjectName, validateURL } from \"@/utils/validators\";\r\n\r\nimport store, { BASE_URL } from \"@/MST/store\";\r\n\r\nimport { UserProjectType } from \"@/MST/user\";\r\n\r\nimport styles from \"./Settings.module.scss\";\r\n\r\nconst ProjectPage: React.FC = () => {\r\n  const [currentProject, setCurrentProject] = useState<UserProjectType>();\r\n  const [projectName, setProjectName] = useState(\"\");\r\n  const [projectURL, setProjectURL] = useState(\"\");\r\n  const [widgetHeaderColor, setWidgetHeaderColor] = useState(\"\");\r\n  const [widgetBackgroundColor, setWidgetBackgroundColor] = useState(\"\");\r\n  const [widgetBorderRadius, setWidgetBorderRadius] = useState(\"0\");\r\n  const [widgetBorderColor, setWidgetBorderColor] = useState(\"\");\r\n  const [widgetBorderWidth, setWidgetBorderWidth] = useState(\"0\");\r\n  const [filesList, setFilesList] = useState<File[]>([]);\r\n  const [error, setError] = useState(\"\");\r\n  const inputRef = useRef<HTMLInputElement | null>(null);\r\n\r\n  const {\r\n    user: {\r\n      _id: userId,\r\n      getProjectById,\r\n      saveProjectSettings,\r\n      ingestKnowledgeBase,\r\n    },\r\n    interface: {\r\n      isLoading,\r\n      spinnerMessage,\r\n      currentProjectId,\r\n      setSpinnerMessage,\r\n      pushNotification,\r\n      setIsLoading,\r\n      setModalType,\r\n    },\r\n  } = store;\r\n\r\n  useEffect(() => {\r\n    if (isLoading) return;\r\n\r\n    const project = getProjectById(currentProjectId);\r\n    if (!project) return;\r\n    const {\r\n      projectName,\r\n      projectURL,\r\n      widgetSettings: {\r\n        widgetHeaderColor,\r\n        widgetBackgroundColor,\r\n        widgetBorderColor,\r\n        widgetBorderWidth,\r\n        widgetBorderRadius,\r\n      },\r\n    } = project;\r\n\r\n    setCurrentProject(project);\r\n    setProjectName(projectName || \"\");\r\n    setProjectURL(projectURL || \"\");\r\n    setWidgetHeaderColor(widgetHeaderColor || \"\");\r\n    setWidgetBackgroundColor(widgetBackgroundColor || \"\");\r\n    setWidgetBorderColor(widgetBorderColor || \"\");\r\n    setWidgetBorderWidth(widgetBorderWidth || \"\");\r\n    setWidgetBorderRadius(widgetBorderRadius || \"\");\r\n  }, [isLoading, currentProjectId]);\r\n\r\n  const getScriptCode = () => {\r\n    return `   <script\r\n    id=\"clarify_bot_widget\"\r\n    data-userId=\"${userId}\"\r\n    data-projectId=\"${currentProjectId}\"\r\n    src=\"${BASE_URL}/widget/getWidget?projectId=${currentProjectId}\"\r\n    data-backendURL=\"${BASE_URL}\"\r\n   ></script>`;\r\n  };\r\n\r\n  const copyScriptCode = () => {\r\n    window.navigator.clipboard.writeText(getScriptCode()).then(() =>\r\n      pushNotification({\r\n        type: \"info\",\r\n        message: \"Script copied to clipboard.\",\r\n      })\r\n    );\r\n  };\r\n\r\n  const onInputChange =\r\n    (type: string) => (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      switch (type) {\r\n        case \"projectName\": {\r\n          setProjectName(e.target.value);\r\n          break;\r\n        }\r\n        case \"projectURL\": {\r\n          setProjectURL(e.target.value);\r\n          break;\r\n        }\r\n        case \"widgetHeaderColor\": {\r\n          setWidgetHeaderColor(e.target.value);\r\n          break;\r\n        }\r\n        case \"widgetBackgroundColor\": {\r\n          setWidgetBackgroundColor(e.target.value);\r\n          break;\r\n        }\r\n        case \"widgetBorderColor\": {\r\n          setWidgetBorderColor(e.target.value);\r\n          break;\r\n        }\r\n        case \"widgetBorderWidth\": {\r\n          setWidgetBorderWidth(e.target.value);\r\n          break;\r\n        }\r\n        case \"widgetBorderRadius\": {\r\n          setWidgetBorderRadius(e.target.value);\r\n          break;\r\n        }\r\n      }\r\n    };\r\n\r\n  const validateMetadata = () => {\r\n    if (!validateProjectName(projectName)) {\r\n      setError(\"projectNameError\");\r\n      return false;\r\n    }\r\n    if (!validateURL(projectURL)) {\r\n      setError(\"projectURLError\");\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const onSaveMetadataClick = async () => {\r\n    if (!validateMetadata()) return;\r\n    setError(\"\");\r\n    const updatedProject = {\r\n      ...currentProject,\r\n      projectName,\r\n      projectURL,\r\n    };\r\n    setIsLoading(true);\r\n    setSpinnerMessage(\"Updating project metadata...\");\r\n    await saveProjectSettings(updatedProject);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const resetMetadata = () => {\r\n    setProjectName(currentProject?.projectName || \"\");\r\n    setProjectURL(currentProject?.projectURL || \"\");\r\n  };\r\n\r\n  const onSaveWidgetSettingsClick = async () => {\r\n    setIsLoading(true);\r\n    setSpinnerMessage(\"Updating widget settings...\");\r\n    const updatedProject = {\r\n      ...currentProject,\r\n      widgetSettings: {\r\n        widgetHeaderColor,\r\n        widgetBackgroundColor,\r\n        widgetBorderRadius,\r\n        widgetBorderColor,\r\n        widgetBorderWidth,\r\n      },\r\n    };\r\n    await saveProjectSettings(updatedProject);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const resetWidgetSettings = () => {\r\n    if (!currentProject) return;\r\n    const { widgetSettings } = currentProject;\r\n    setWidgetHeaderColor(widgetSettings?.widgetHeaderColor || \"\");\r\n    setWidgetBackgroundColor(widgetSettings?.widgetBackgroundColor || \"\");\r\n    setWidgetBorderColor(widgetSettings?.widgetBorderColor || \"\");\r\n    setWidgetBorderWidth(widgetSettings?.widgetBorderWidth || \"\");\r\n    setWidgetBorderRadius(widgetSettings?.widgetBorderRadius || \"\");\r\n  };\r\n\r\n  const handleFilesAdd = (e: any) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    console.log(\"handleFilesAdd\");\r\n    // defining if we added file through input dialogue window - or drag'ndrop\r\n    try {\r\n      const files: FileList =\r\n        e.type === \"drop\" ? e.dataTransfer.files : e.target.files;\r\n      const newFilesList = [...filesList];\r\n      for (let i = 0; i < files.length; i += 1) {\r\n        if (files[i].type !== \"text/plain\") continue;\r\n        newFilesList.push(files[i]);\r\n      }\r\n      setFilesList(newFilesList);\r\n\r\n      //Nullify the input value, it is only the buffer, might be glitchy behavior without this.\r\n      if (inputRef?.current?.value) inputRef.current.value = \"\";\r\n    } catch (error: any) {\r\n      pushNotification({\r\n        type: \"error\",\r\n        message:\r\n          \"Error while loading files from local drive. \\n\" + error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  const clearFilesList = () => {\r\n    setFilesList([]);\r\n  };\r\n\r\n  const onIngestKBClick = async () => {\r\n    setIsLoading(true);\r\n    setSpinnerMessage(\"Ingesting knowledge base\");\r\n    const formData = new FormData();\r\n    filesList.forEach((file) => {\r\n      formData.append(\"dataFiles\", file);\r\n    });\r\n\r\n    formData.append(\"projectId\", currentProject?._id || \"\");\r\n    formData.append(\"projectName\", currentProject?.projectName || \"\");\r\n\r\n    await ingestKnowledgeBase(formData);\r\n    clearFilesList();\r\n  };\r\n\r\n  const onDeleteKBClick = () => {\r\n    setSpinnerMessage(\"Deleting knowledge base\");\r\n    setModalType(\"proejctKBDelete\");\r\n    clearFilesList();\r\n  };\r\n\r\n  if (!currentProject) return <div>Project not found.</div>;\r\n\r\n  return (\r\n    <div className={styles.projectPageWrapper}>\r\n      <div className={styles.projectHeader}>\r\n        <Link\r\n          to={\"/cabinet/projects\"}\r\n          style={{ display: \"block\", width: \"fit-content\" }}\r\n        >\r\n          <Button icon=\"icon_arrow_left\" text={\"To projects list\"} />\r\n        </Link>\r\n      </div>\r\n\r\n      <div className={styles.projectPage}>\r\n        <div className={styles.projectPageSection}>\r\n          <div className={styles.sectionHeader}>\r\n            <h2>Widget settings</h2>\r\n            <Button\r\n              disabled={isLoading}\r\n              text={\"Discard\"}\r\n              icon={\"icon_close\"}\r\n              onClick={resetWidgetSettings}\r\n            />\r\n            <Button\r\n              disabled={isLoading}\r\n              text={\"Save\"}\r\n              icon={\"icon_save\"}\r\n              onClick={onSaveWidgetSettingsClick}\r\n            />\r\n          </div>\r\n\r\n          <div className={styles.sectionContent + \" \" + styles.widgetSettings}>\r\n            <div className={styles.widgetControls}>\r\n              {\" \"}\r\n              <label className={styles.color}>\r\n                Header color\r\n                <input\r\n                  type=\"color\"\r\n                  value={widgetHeaderColor}\r\n                  onChange={onInputChange(\"widgetHeaderColor\")}\r\n                />\r\n              </label>\r\n              <label className={styles.color}>\r\n                Background color\r\n                <input\r\n                  type=\"color\"\r\n                  value={widgetBackgroundColor}\r\n                  onChange={onInputChange(\"widgetBackgroundColor\")}\r\n                />\r\n              </label>\r\n              <label className={styles.color}>\r\n                Border color\r\n                <input\r\n                  type=\"color\"\r\n                  value={widgetBorderColor}\r\n                  onChange={onInputChange(\"widgetBorderColor\")}\r\n                />\r\n              </label>\r\n              <label className={styles.range}>\r\n                Border width, px\r\n                <input\r\n                  type=\"range\"\r\n                  min={0}\r\n                  max={6}\r\n                  value={widgetBorderWidth}\r\n                  onChange={onInputChange(\"widgetBorderWidth\")}\r\n                />\r\n              </label>\r\n              <label className={styles.range}>\r\n                Border radius, px\r\n                <input\r\n                  type=\"range\"\r\n                  min={0}\r\n                  max={30}\r\n                  value={widgetBorderRadius}\r\n                  onChange={onInputChange(\"widgetBorderRadius\")}\r\n                />\r\n              </label>\r\n            </div>\r\n            <div className={styles.demoWidgetWrapper}>\r\n              <DemoWidget\r\n                settings={{\r\n                  projectId: currentProjectId,\r\n                  widgetHeaderColor,\r\n                  widgetBackgroundColor,\r\n                  widgetBorderRadius,\r\n                  widgetBorderColor,\r\n                  widgetBorderWidth,\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className={styles.projectPageSection}>\r\n          <div className={styles.sectionHeader}>\r\n            <h2>Knowledge base</h2>\r\n            <div className={styles.buttonsWrapper}>\r\n              <Button\r\n                disabled={isLoading || !filesList.length}\r\n                text={\"Ingest\"}\r\n                icon={\"icon_edit\"}\r\n                onClick={onIngestKBClick}\r\n              />\r\n              <Button\r\n                disabled={\r\n                  isLoading || !currentProject?.projectIngestedData?.length\r\n                }\r\n                text={\"Delete\"}\r\n                icon={\"icon_delete\"}\r\n                onClick={onDeleteKBClick}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className={styles.sectionContent + \" \" + styles.knowledgeBase}>\r\n            <div>\r\n              <label>List of knowledgebase files</label>\r\n              <div className={styles.knowledgeBaseList}>\r\n                <ul className={styles.filesList}>\r\n                  {currentProject?.projectIngestedData?.map(\r\n                    ({ fileName, size }) => (\r\n                      <li key={fileName}>\r\n                        <span>{fileName}</span>\r\n                        <span>\r\n                          {Number.parseFloat(size || \"\").toFixed(2)} kb\r\n                        </span>\r\n                      </li>\r\n                    )\r\n                  )}\r\n                </ul>\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <label className={styles.labelWrapper}>\r\n                <span>Files to ingest</span>\r\n                {filesList?.length ? (\r\n                  <span className={styles.clearList} onClick={clearFilesList}>\r\n                    Clear list\r\n                  </span>\r\n                ) : null}\r\n              </label>\r\n              <input\r\n                ref={inputRef}\r\n                type=\"file\"\r\n                accept=\".txt\"\r\n                multiple={true}\r\n                onChange={handleFilesAdd}\r\n              />\r\n\r\n              <div\r\n                className={styles.knowledgeBaseUploadForm}\r\n                onDragOver={(e) => e.preventDefault()}\r\n                onDrop={handleFilesAdd}\r\n                onClick={() => inputRef?.current?.click()}\r\n              >\r\n                {filesList?.length ? (\r\n                  <ul className={styles.filesList}>\r\n                    {Array.from(filesList).map(({ name, size }) => {\r\n                      return (\r\n                        <li key={name + size}>\r\n                          <span>{name}</span>\r\n                          <span>{`${size / 1000} kb`}</span>\r\n                        </li>\r\n                      );\r\n                    })}\r\n                  </ul>\r\n                ) : (\r\n                  <div className={styles.dragndropMessage}>\r\n                    Drag'n'drop txt files or click Add files button. Files are\r\n                    adding up to the ones that are already in knowledge base.\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>{\" \"}\r\n        <div className={styles.projectPageSection}>\r\n          <div className={styles.sectionHeader}>\r\n            <h2>Metadata</h2>\r\n            <Button\r\n              disabled={isLoading}\r\n              text={\"Discard\"}\r\n              icon={\"icon_close\"}\r\n              onClick={resetMetadata}\r\n            />\r\n            <Button\r\n              disabled={isLoading}\r\n              text={\"Save\"}\r\n              icon={\"icon_save\"}\r\n              onClick={onSaveMetadataClick}\r\n            />\r\n          </div>\r\n          <div className={styles.sectionContent}>\r\n            <label>\r\n              Project name\r\n              <span className=\"hintText\">\r\n                leters, numbers, dashes are allowed\r\n              </span>\r\n              <input\r\n                type=\"text\"\r\n                className={error === \"projectNameError\" ? \"error\" : \"\"}\r\n                placeholder={\"project-name\"}\r\n                value={projectName}\r\n                onChange={onInputChange(\"projectName\")}\r\n              />\r\n            </label>\r\n            <label>\r\n              Project URL for the widget usage\r\n              <input\r\n                type=\"url\"\r\n                className={error === \"projectURLError\" ? \"error\" : \"\"}\r\n                placeholder={\"https://example.com\"}\r\n                value={projectURL}\r\n                onChange={onInputChange(\"projectURL\")}\r\n              />\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className={styles.projectPageSection}>\r\n          <div className={styles.sectionHeader}>\r\n            <h2>Client script</h2>\r\n            <Button\r\n              disabled={isLoading}\r\n              text={\"Copy\"}\r\n              icon={\"icon_copy\"}\r\n              onClick={copyScriptCode}\r\n            />\r\n          </div>\r\n          <div className={styles.sectionContent}>\r\n            <code className={styles.scriptCode}>{getScriptCode()}</code>{\" \"}\r\n          </div>\r\n        </div>\r\n        {isLoading ? <Spinner text={spinnerMessage} /> : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(ProjectPage);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"projectTitle\":\"Cabinet_projectTitle__mdMBP\",\"projectName\":\"Cabinet_projectName__zYEFB\",\"projectId\":\"Cabinet_projectId__6NzER\"};","import { lazy, Suspense, useEffect, useState } from \"react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport {\r\n  Switch,\r\n  Route,\r\n  useRouteMatch,\r\n  Redirect,\r\n  useLocation,\r\n} from \"react-router-dom\";\r\nimport { ProjectStatusLabel, Spinner } from \"@/components\";\r\nimport store from \"@/MST/store\";\r\n\r\nimport { UserProjectType } from \"@/MST/user\";\r\n\r\nimport styles from \"./Cabinet.module.scss\";\r\n\r\nconst Projects = lazy(\r\n  () => import(\"@/views/Cabinet/Projects\" /* webpackChunkName: \"Projects\" */)\r\n);\r\nconst Billing = lazy(\r\n  () => import(\"@/views/Cabinet/Billing\" /* webpackChunkName: \"Billing\" */)\r\n);\r\nconst Settings = lazy(\r\n  () => import(\"@/views/Cabinet/Settings\" /* webpackChunkName: \"Settings\" */)\r\n);\r\n// const Stats = lazy(\r\n//   () => import(\"@/views/Cabinet/Stats\" /* webpackChunkName: \"Stats\" */)\r\n// );\r\n\r\ntype Props = {};\r\n\r\nconst Cabinet: React.FC<Props> = () => {\r\n  const { url } = useRouteMatch();\r\n  const { pathname } = useLocation();\r\n  const {\r\n    interface: { currentProjectId, isLoading },\r\n    user: { getProjectById },\r\n  } = store;\r\n\r\n  const [currentProject, setCurrentProject] =\r\n    useState<UserProjectType | null>();\r\n\r\n  useEffect(() => {\r\n    setCurrentProject(getProjectById(currentProjectId));\r\n  }, [currentProjectId, isLoading]);\r\n\r\n  return (\r\n    <div className={\"page\"}>\r\n      <div className={\"pageContent\"}>\r\n        {currentProject ? (\r\n          <div className={styles.projectTitle}>\r\n            <h1 className={styles.projectName}>\r\n              {\"Project name : \" + currentProject.projectName}\r\n              <ProjectStatusLabel\r\n                isActive={!!currentProject.subscription?.isActive}\r\n              />\r\n            </h1>\r\n            <span className={styles.projectId}>\r\n              {\"Project id : \" + currentProject._id}\r\n            </span>\r\n          </div>\r\n        ) : null}\r\n        <Suspense fallback={<Spinner />}>\r\n          <Switch>\r\n            {/** Removing trailing slashes from the URL*/}\r\n            <Redirect from=\"/:url*(/+)\" to={pathname.slice(0, -1)} />{\" \"}\r\n            <Route path={`${url}/projects`} component={Projects} />\r\n            {/* <Route path={`${url}/stats`} component={Stats} /> */}\r\n            <Route path={`${url}/billing`} component={Billing} />\r\n            <Route path={`${url}/settings`} component={Settings} />\r\n            {/** For all the wrong routes. */}\r\n            <Redirect to={`${url}/projects`} />{\" \"}\r\n          </Switch>\r\n        </Suspense>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(Cabinet);\r\n","import styles from \"./Stats.module.scss\";\r\ntype Props = {};\r\n\r\nconst Stats: React.FC<Props> = () => {\r\n  return (\r\n    <div>\r\n      Stats.\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Stats;\r\n"],"names":["stripePromise","loadStripe","BillingStatus","userStripeCustomerId","store","portalRedirect","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","portal_session","wrap","_context","prev","next","axios","BASE_URL","sent","window","location","href","data","portal_session_url","stop","apply","arguments","_jsxs","children","_jsx","Button","onClick","CheckoutForm","_store$user","createSubscription","getProjectById","currentProjectId","_useState","useState","_useState2","_slicedToArray","clientSecret","setClientSecret","currentProject","useEffect","projectId","projectName","then","secret","options","id","EmbeddedCheckoutProvider","stripe","EmbeddedCheckout","CheckoutResult","_getProjectById","_useState3","_useState4","sessionResult","setSessionResult","_store$user2","getPaymentSessionStatus","updateSubscriptionDataLocal","_store$interface","setCurrentProjectId","search","useLocation","urlParams","URLSearchParams","session_id","get","isActive","status","stripeCustomerId","stripeProjectSubscriptionId","lastPaid","className","styles","observer","_currentProject$subsc","path","useRouteMatch","Switch","Route","exact","component","subscription","concat","Redirect","to","_id","projectCreationDate","projectURL","onDelete","history","useHistory","date","Date","toLocaleDateString","undefined","weekday","year","month","day","replace","ProjectStatusLabel","icon","text","e","userProjects","setModalType","setDeleteProjectId","isLoading","onDeleteProjectClick","length","map","project","ProjectTile","_objectSpread","Spinner","_currentProject$proje","_currentProject$proje2","setCurrentProject","setProjectName","_useState5","_useState6","setProjectURL","_useState7","_useState8","widgetHeaderColor","setWidgetHeaderColor","_useState9","_useState10","widgetBackgroundColor","setWidgetBackgroundColor","_useState11","_useState12","widgetBorderRadius","setWidgetBorderRadius","_useState13","_useState14","widgetBorderColor","setWidgetBorderColor","_useState15","_useState16","widgetBorderWidth","setWidgetBorderWidth","_useState17","_useState18","filesList","setFilesList","_useState19","_useState20","error","setError","inputRef","useRef","userId","saveProjectSettings","ingestKnowledgeBase","spinnerMessage","setSpinnerMessage","pushNotification","setIsLoading","_project$widgetSettin","widgetSettings","getScriptCode","onInputChange","type","target","value","onSaveMetadataClick","updatedProject","validateProjectName","validateURL","abrupt","onSaveWidgetSettingsClick","_ref2","_callee2","_context2","handleFilesAdd","preventDefault","stopPropagation","console","log","_inputRef$current","files","dataTransfer","newFilesList","_toConsumableArray","i","push","current","message","clearFilesList","onIngestKBClick","_ref3","_callee3","formData","_context3","FormData","forEach","file","append","Link","style","display","width","disabled","onChange","min","max","DemoWidget","settings","projectIngestedData","_ref4","fileName","size","Number","parseFloat","toFixed","ref","accept","multiple","onDragOver","onDrop","_inputRef$current2","click","Array","from","_ref5","name","placeholder","navigator","clipboard","writeText","Projects","lazy","Billing","Settings","url","pathname","Suspense","fallback","slice"],"sourceRoot":""}